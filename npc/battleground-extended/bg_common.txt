// ==============================================================================
// = BY VYKIMO
// ==============================================================================
// BattleGround Extended System - Core NPCs
// ==============================================================================
// NEW! 
// BG UI supported
// ***********************
// ==============================================================================
//  Mapflags
bat_room	mapflag	nomemo
bat_room	mapflag	nowarpto
bat_room	mapflag	nowarp
bat_room	mapflag	nobranch
bat_room	mapflag	nopenalty
bat_room	mapflag	noteleport
bat_room	mapflag	nosave	SavePoint
bat_room	mapflag	town

// Fonction reward
// Reward_BG(Equipe1,Equipe2)
function	script	Reward_BG	{
	
	// Premature end
	if($@PrematureEnd && !$PREMATURE_REWARDS)
		return;
	
	if(getargcount() >= 2) {
	
		.@bgmap$ = getarg(0);
		.@result = getarg(1);

		// Add reward if option is set
		.@add_to_reward = $REWARDS_VARIATIONS ? (bg_get_data($@BG_Team1,0) + bg_get_data($@BG_Team2,0))/2 : 0;
	
		.@add_to_reward += getarg(2,0);
		
		// Reward both teams
		bg_reward_all(.@bgmap$,$@BG_Team1,$@BG_Team2,$BGREWARD_ITID,.@add_to_reward,.@result);	
		
	}
	return;
}

// Battleground Queue Admin
// ***********************
bat_room,0,0,0	script	BG_Queue_Join	-1,{
	end;
	
	
// ================================== BattleGround Hour ======================================
// Uncomment to have Scheduled Battleground :
/*
OnReloadMapServer:
	if(!agitcheck3() && !agitcheck2() && !agitcheck())
		end;
		
OnMon1800:
OnMon1900:
OnTue2100:
OnTue2200:
OnThu2200:
OnThu2300:
OnFri2000:
OnFri2100:
OnSat1800:
OnSat1900:
	switch( gettime(DT_DAYOFWEEK) ) {
		case MONDAY:
		case SATURDAY:
			if( gettime(DT_HOUR) >= 18 && gettime(DT_HOUR) < 19 && !bgcheck() ) bgstart();
			if( gettime(DT_HOUR) == 19 && bgcheck() ) bgend;
			break;
		case TUESDAY:
			if( gettime(DT_HOUR) >= 21 && gettime(DT_HOUR) < 22 && !bgcheck()  ) bgstart();
			if( gettime(DT_HOUR) == 22 && bgcheck() ) bgend;
			break;
		case THURSDAY:
			if( gettime(DT_HOUR) >= 22 && gettime(DT_HOUR) < 23 && !bgcheck()  ) bgstart();
			if( gettime(DT_HOUR) == 23 && bgcheck() ) bgend;
			break;
		case FRIDAY:
			if( gettime(DT_HOUR) >= 20 && gettime(DT_HOUR) < 21 && !bgcheck()  ) bgstart();
			if( gettime(DT_HOUR) == 21 && bgcheck() ) bgend;
			break;
	}
	end;
*/
// OR
// 24H/24 Battleground
// Uncomment to have 24/24 BG :

OnReloadMapServer:
	if(!agitcheck3() && !agitcheck2() && !agitcheck() && !bgcheck())
		bgstart();
		
	end;

// ================================== BattleGround Happy Hour ===================================
// BattleGround Happy Hour
OnDoHappyHour:
OnClock1600:
OnClock1800:
OnClock2000:
OnClock2200:
	switch( gettime(DT_DAYOFWEEK) )
	{
	case MONDAY:
	case WEDNESDAY:
	case FRIDAY:
		if( gettime(DT_HOUR) >= 20 && gettime(DT_HOUR) < 22 )
		{
			mapannounce "bat_room","-- Battleground Happy Hour has begun --",0x00FF00;
			setbattleflag "bg_reward_rates",120; // +20% Reward Rates
			end;
		}
		
		if( gettime(DT_HOUR) == 22 )
		{
			mapannounce "bat_room","-- Battleground Happy Hour is over --",0x00BFFF;
			setbattleflag "bg_reward_rates",100; // Normal Rates
			end;
		}
		break;
	case TUESDAY:
	case THURSDAY:
	case SATURDAY:
		if( gettime(DT_HOUR) >= 16 && gettime(DT_HOUR) < 18 )
		{
			mapannounce "bat_room","-- Battleground Happy Hour has begun --",0x00FF00;
			setbattleflag "bg_reward_rates",120; // +20% Reward Rates
			end;
		}
		
		if( gettime(DT_HOUR) == 18 )
		{
			mapannounce "bat_room","-- Battleground Happy Hour is over --",0x00BFFF;
			setbattleflag "bg_reward_rates",100; // Normal Rates
			end;
		}
		break;
	}
	end;


// ======================================== OnEvents ========================================
OnAgitStart:
	if(bgcheck())
		bgend();
	end;
	
// 1 minute waiting after woe end
OnAgitEnd:
	sleep 60000;
	donpcevent "BG_Queue_Join::OnReloadMapServer";
	end;

OnBGGlobalStart:
	mapannounce "bat_room","==== The Battleground is starting ==== You can join using the Battleground Button.",0xBFFF00;
	sleep 1000;
	// On lance la rotation
	donpcevent "BG_Queue_Join::OnRotate";
	end;
	
OnBGEnd:
	mapannounce "bat_room","==== The Battleground just ended. ====",0xBFFF00;
	// On stoppe la rotation
	stopnpctimer;
	end;
// ======================================== Commands ========================================
// @joinbg
OnDoJoin:	
	if($@BG_Status == 2) {
		dispbottom "Please retry in few seconds, just wait for the end of the current mode.";
	} else {
		if(bgcheck()) {
			dispbottom .@atcmd_command$+" trying to join the queue. @leavebg to quit the queue.";
			bg_joinbg(.BG_Names$[.@BG_Index]);
		} else {
			dispbottom .@atcmd_command$+" failed. Command available when the battleground is on.";
		}
	}
end;

// @leavebg
OnDoLeave: 
	if(bgcheck()) {
		dispbottom "@leavebg trying to quit the queue.";
		bg_leavebg(.BG_Names$[.@BG_Index]);
	} else 
		dispbottom "@leavebg failed. Command available when the battleground is on.";
	end;

// ======================================== CONFIG ========================================
OnInit:
	// Configuration
	// *******************
	// Rewards when premature end (0 players in one team) ?
	$PREMATURE_REWARDS = 1;
	// Rewards variation depending on number of users
	$REWARDS_VARIATIONS = 0;
	// Reward item id
	// 7804 : Battleground Badges
	// 7773 : War Badges
	// 7829 : Valor Badges
	// 7828 : Bravery Badges
	$BGREWARD_ITID = 7804;
	// ================================================
	// Min level to enter BG lobby
	$@BG_MinLevel = 80;
	// *******************
	// Battleground Modes
	$@BG_Count = bg_info("bg_ctf", BG_TOTAL_ARENA);
	// Main Code
	// *******************
	bindatcmd "leavebg", strnpcinfo(3)+"::OnDoLeave";
	bindatcmd "joinbg", strnpcinfo(3)+"::OnDoJoin";
	bindatcmd "rotatebg", strnpcinfo(3)+"::OnRotate", 99;
	donpcevent "BG_Queue_Join::OnDoHappyHour";
	bgend();
	// Warps Teams
	if( $@BG_Team1 ) { bg_warp $@BG_Team1,"bat_room",155,150; bg_destroy $@BG_Team1; set $@BG_Team1, 0; }
	if( $@BG_Team2 ) { bg_warp $@BG_Team2,"bat_room",155,150; bg_destroy $@BG_Team2; set $@BG_Team2, 0; }
	donpcevent "BG_Queue_Join::OnReloadMapServer";
	.Mode_Precedent = -1;		
	end;

OnRotate:
	set $@BG_Status, 0;	
	// Warps Teams
	if( $@BG_Team1 ) { bg_destroy $@BG_Team1; set $@BG_Team1, 0; }
	if( $@BG_Team2 ) { bg_destroy $@BG_Team2; set $@BG_Team2, 0; }
	
OnTimer180000:
	stopnpctimer;
	$@PrematureEnd = 0;
	
	if( $@BG_Status > 0 )
		end;
	
	.@BG_Index = bg_current_mode();
	if(bg_modeselection() == 2)
		.Mode_Precedent = .@BG_Index;
	else if(bg_modeselection() == 1) {
		// End script if bg ended
		if(!bgcheck())	end;
		
		set .@Old_BG_Index, .@BG_Index;
		
		// Move to Next Arena
		if( set(.@BG_Index,.@BG_Index + 1) > $@BG_Count )
			set .@BG_Index,1; // Restart Rotation

		if(.@BG_Index == $@PB_BG_Index && !$PB_AVAILABLE) {
			if($TD_AVAILABLE)
				.@BG_Index = $@TD_BG_Index;
			else 
				.@BG_Index = 1;
			
		} else if(.@BG_Index == $@TD_BG_Index && !$TD_AVAILABLE)
			.@BG_Index = 1;
		
		bg_set_current_mode(.@BG_Index);

		if (.@Old_BG_Index > 0) {
			bg_move_queue(bg_info(.@Old_BG_Index, BG_INFO_NAME), bg_info(.@BG_Index, BG_INFO_NAME));
		}

		initnpctimer; // Rotation start
	}
	
	set .@msg$, "[ Battleground ] ~ " + bg_info(bg_current_mode(), BG_INFO_NAME) + " -- Ready to accept new challengers -- @joinbg to join the battle.";
	mapannounce "bat_room",.@msg$,0x00FFFF;
	end;
	
// Everytime someone joins/leaves, verify number of players
OnJoinEvent:	
	set .@BG_Count1, bg_get_data($@BG_Team1,0);
	set .@BG_Count2, bg_get_data($@BG_Team2,0);
	
	if(.@BG_Count1 <= 0 || .@BG_Count2 <= 0) {	
		$@PrematureEnd = 1;	
		set .@msg$, "[ Battleground ] - No more enough players. " + bg_info(bg_current_mode(), BG_INFO_NAME) + " will end soon.";
		mapannounce "bat_room",.@msg$,0xBFFF00;
		bg_premature_end(bg_current_mode());		
	} else {
		set .@msg$, "[ Battleground ] - " + bg_info(bg_current_mode(), BG_INFO_NAME) + " -- B: " + .@BG_Count1 + "/" + bg_info(bg_current_mode(), BG_INFO_MAX_PLAYERS) + ", R: " + .@BG_Count2 + "/" + bg_info(bg_current_mode(), BG_INFO_MAX_PLAYERS) + " (Playing)";
		mapannounce "bat_room",.@msg$,0xBFFF00;
	}	
	end;
}
// Registration NPC
// ***********************
bat_room,153,157,4	script	Battle Recruiter::BG_Register	10127,{
	mes "[^1AAF9B Recrutador de Batalha ^000000]";
	mes "Este é o serviço de Informações e Registro do Campo de Batalha.";
	mes "O que você quer fazer?";
	next;
	switch( select("^FF0000Emblemas de rodada completa^000000:^FFA500Modos do campo de batalha^000000:Sair") )
	{
	case 3: close;
	case 1:
		mes "[^1AAF9B Recrutador de Batalha ^000000]";
		mes "Você pode trocar seus pontos de participação BG, uma rodada completa de cada BG ganho, por um número aleatório de ^FF0000"+ getitemname($BGREWARD_ITID) +"^000000.";
		mes "Deixa eu ver seus pontos...";
		next;
		.@ok = 0;
		for(.@i=1;.@i<=$@BG_Count;.@i++) {
			mes bg_info(.@i, BG_INFO_NAME)+" : ^0000FF" + getd(bg_info(.@i, BG_INFO_VARIABLE)) + "^000000";
			if( getd(bg_info(.@i, BG_INFO_VARIABLE)) > 0) .@ok++;
		}
		next;
		if( .@ok == $@BG_Count)
		{
			specialeffect 618;
			
			for(.@i=1;.@i<=$@BG_Count;.@i++)
				set getd(bg_info(.@i, BG_INFO_VARIABLE)),getd(bg_info(.@i, BG_INFO_VARIABLE))-1;

			getitem $BGREWARD_ITID,rand(40,60);
			mes "[^1AAF9B Recrutador de Batalha ^000000]";
			mes "Aqui estão os emblemas para você!!";
			mes "Espero que você possa encontrar dentro dele uma grande surpresa.";
			mes "Fale comigo se quiser trocar mais.";
		}
		else
		{
			mes "[^1AAF9B Recrutador de Batalha ^000000]";
			mes "Para trocar seus pontos, você precisa de pelo menos um de cada Campo de Batalha.";
			mes "Jogue todos os tipos de BG's!";
		}
		close;
	case 2:
		mes "[^1AAF9B Recrutador de Batalha ^000000]";
		mes "Battlegrounds Arena são diferentes tipos de jogos onde as equipes lutam pela vitória.";
		mes "O que você quer fazer?";
		next;
		switch( select("Sobre o Campo de Batalha") )
		{
		case 1:
			mes "[^1AAF9B Recrutador de Batalha ^000000]";
			mes "Diga-me... que campo de batalha você não entende?";
			next;
			switch( select("Capturar a bandeira:Equipe DeathMatch:Controle de Cristais:Olho da tempestade:Dominação:Conquista:Rush:KvM" ) )
			{
			case 1:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "O objetivo do Flavius ??Battle CTF é marcar 3 pontos antes do seu inimigo, capturando sua bandeira.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Para capturar uma bandeira, você precisa pegar a bandeira inimiga e trazê-la para sua bandeira base.";
				next;
				mes "[^FFA500Battle Recruiter^000000]";
				mes "Se a bandeira da sua base também for capturada, você precisa matar o portador da bandeira e levar a bandeira de volta à sua base.";
				break;
			case 2:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Mate todos os jogadores inimigos para deixar sua equipe sem pontos.";
				mes "Proteja nosso exército.";
				break;
			case 3:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Pegue as Cristais no meio do campo de batalha e coloque em sua base, nos Pontos de Cristal.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Cada Cristal dará pontos à sua equipe. A primeira equipe a atingir 99 pontos ganha o jogo.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Proteja seus cristais de serem capturadas pelo inimigo.";
				break;
			case 4:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Existem duas bases, Norte e Sul, que as equipes podem capturar mantendo a posição na Base mais do que a outra equipe.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Cada base lhe dará pontos a cada 5 segundos de Dominação. Se sua equipe controlar ambas as bases, a quantidade de pontos aumenta.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Para obter pontos adicionais, no meio há um spawn de Flag, capture-o e coloque-o em qualquer uma das Bases de sua equipe.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "A primeira equipe a atingir 99 pontos vence a partida.";
				break;
			case 5:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Existem três bases, Norte, Centro e Sul, que as equipes podem capturar mantendo a posição na Base mais do que a outra equipe.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Cada base lhe dará pontos a cada 5 segundos de Dominação.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "A primeira equipe a atingir 99 pontos vence a partida.";
				break;			
			case 6:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Se você estiver atacando, destrua as defesas inimigas e sua bandeira.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Se você estiver defendendo, proteja as defesas do seu castelo e a bandeira.";
				break;
			case 7:
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Lute para capturar o Castelo e organize sua equipe para defendê-lo.";
				next;
				mes "[^FFA500Recrutador de Batalha^000000]";
				mes "Se você falhar na primeira captura, mate o defensor e leve-o para o seu time.";
				break;
			case 8:
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Lute para diminuir os pontos do oponente para 0.";
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Cada jogador representa um ponto, se você matá-lo seu time ganha um ponto e o time dele perde um ponto.";
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "5 minutos de luta. A equipe com a pontuação mais alta ganha o jogo.";
				break;
			case 9:
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "É um jogo de futebol, o objetivo é marcar mais gols que o time adversário durante os 4 minutos de jogo.";
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Você não pode acertar seus adversários, mas tome cuidado para não levar a bola na cara...";				
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Se um jogador morre na área penal, uma reposição é feita pela equipe em que a falta foi cometida.";
				break;
			case 10:
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Você tem que colocar o Fumbi no gol adversário.";
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Para pegar o Fumbi basta tocá-lo no chão.";
				next;
				mes "[^1AAF9B Recrutador de Batalha ^000000]";
				mes "Gols, abates e posse de Fumbi lhe darão pontos.";
				break;
			}
			break;
		}
		close;
	}
	end;
}

// General Guillaume
// ***********************
bat_room,160,159,3	script	General Guillaume	420,{
	cutin "bat_kiyom2",2;
	mes "[General Guillaume]";
	mes "Aventureiro de sangue quente, precisamos de sua habilidade para vencer esta batalha.";
	next;
	cutin "bat_kiyom1",2;
	mes "[General Guillaume]";
	mes "Nosso grande rei, Marcel Marollo VII, está muito doente ultimamente. Sua Majestade declarou que escolheu a mim ou ao Príncipe Croix como o próximo rei entre seus 9 filhos.";
	next;
	mes "[General Guillaume]";
	mes "Dois reis não podem compartilhar uma nação!";
	mes "Apenas o vitorioso da batalha designada de Sua Majestade será entronizado.";
	next;
	mes "[General Guillaume]";
	mes "No entanto, esta não é apenas uma batalha entre nós. Esta batalha determinará o futuro deste país. Prometo pela minha honra provar que sou eu quem pode proteger este Maroll de ameaças externas.";
	close2;
	cutin "",255;
	end;
}

// General Croix
// ***********************
bat_room,160,140,3	script	Prince Croix	416,{
	cutin "bat_crua1",2;
	mes "[Prince Croix]";
	mes "Sábio aventureiro, por que você não nos empresta seu poder para a vitória?";
	next;
	cutin "bat_crua2",2;
	mes "[Prince Croix]";
	mes "Não desejo derramar sangue, mas não tenho escolha a não ser lutar pela possibilidade de paz e pelo bem do meu povo.";
	next;
	mes "[Prince Croix]";
	mes "O General Guillaume pode ter uma vantagem nesta batalha por ser o grande general de Maroll, mas isso não significa automaticamente que ele vencerá. Quero vencer esta batalha para poder dar um futuro melhor ao meu povo.";
	close2;
	cutin "",255;
	end;
}

// Guard Dummy
// ***********************

bat_room,161,141,3	script	Prince Croix's Aid::bat_aid	415,{ end; }
bat_room,161,139,3	duplicate(bat_aid)	Prince Croix's Aid::bat_aid2	415
bat_room,161,160,3	duplicate(bat_aid)	General Guillaume's Aid::bat_aid3	419
bat_room,161,158,3	duplicate(bat_aid)	General Guillaume's Aid::bat_aid4	419

// Flags
// ***********************

-	script	Base Flag#bg	-1,{ end; }

// BattleGround Warper - Exit
// ***********************

bat_room,148,150,4	script	Teleporter#bat	124,{
	mes "[Teleportadora]";
	mes "Você deseja deixar o campo de batalha? Use meu serviço para retornar à cidade.";
	next;
	if( select("Sair:Ficar por aqui") == 2 )
	{
		mes "[Teleportadora]";
		mes "Estarei aqui sempre que precisar do meu serviço.";
		close;
	}
	mes "[Teleportadora]";
	mes "Você será enviado de volta para " + getsavepoint(0) + ".";
	close2;
	warp getsavepoint(0), getsavepoint(1), getsavepoint(2);
	end;
}

// Kafra
// ***********************
//bat_room,148,147,4	script	Kafra Staff::kaf_bat	861,{
	//cutin "kafra_09",2;
	//callfunc "F_Kafra",0,2,1,150,0;
//}